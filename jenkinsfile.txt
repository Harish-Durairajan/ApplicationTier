pipeline{
    agent any
    stages{
        stage("clean workspace"){
            steps{
                cleanWs()
            }
        }
        stage("checking out from github"){
            steps{
                checkout scmGit(branches: [[name: '*/${Branch}']], 
                userRemoteConfigs: [[url: '${git_url}']])
            }
        }   
          
        stage("docker logging"){
            steps{
                sh "echo harish | sudo -S docker images > /dev/null"
            }
        }    
        stage("checking docker deamon running"){
            steps{
                sh "sudo docker images > /dev/null"
            }
        }
        stage("installing maven"){
            steps{
                sh "mvn clean"
                sh "mvn install"
            }
        }
        stage("Building the image file"){
            steps{
                sh "sudo docker build -t ${imageName}."
            }
        }        
        stage("tagging the image file"){
            steps{
                sh "docker tag hello-world:latest AKIAY6DW5YU3KC3254E5.dkr.ecr.us-east-2.amazonaws.com/cicd-repository"
                //sh "sudo docker tag ${imageName} harishdurai/applicationtier:${tagName} "
            }
        } 
        stage("pushing the image in docker hub"){
            steps{
                sh "docker push AKIAY6DW5YU3KC3254E5.dkr.ecr.us-east-2.amazonaws.com/cicd-repository "
                //sh "sudo docker push harishdurai/applicationtier:${tagName}"
            }
        } 
        stage("Deploying dockerfile"){
            steps{
                sh "kubernetes apply -f springDeployment.yaml"
                sh "kubernetes apply -f springService.yaml"
            }
        }       
        // stage("pulling the image from docker hub"){
        //     steps{
        //         sh "sudo docker pull harishdurai/applicationtier:${tagName}"
        //     }
        // }
        // stage("createing the container"){
        //     steps{
        //         sh "sudo docker run --name ${containerName} -p ${port}:8080 -d  ${imageName}:${tagName}"
        //     }
        // }
    }
}